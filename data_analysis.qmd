---
title: "Nutrition support practices- Data analysis"
author: "Eric Anku"
format: html
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
```


```{r libraries}
pacman::p_load(
        rio, # Import dataset
        finalfit, # Labelling and data inspection
        gtsummary, # Summary tables
        tidyverse, # Data wrangling and visualisation
        janitor, # Data cleaning
        ggstatsplot, # Inferential plots
        here, # Working directory
        naniar, # Missing values
        skimr, # Skim dataset
        psych, # Describe dataset
        lessR, # Multiple plots and statistical tests
        forcats, # Working with factors
        ggthemes, # Themes
        questionr, # Multiple choice questions
        patchwork, # Combine plots
        ggpubr,
        cowplot # Combine multiple figures
)
```

```{r import-datasets}
# Full clean dataset
nss <- import(here("data","nss_merge_clean.RData"))

# Subset dataset
## Demographics
demographics <- import(here("data","demographics_merge.RData"))
en <- import(here("data","enteral_nutrition_merge.RData"))
mcqs <- import(here("data","mcqs_merge.RData"))
nutrition_assessment <- import(here("data","nutrition_assessment_merge.RData"))
ons <- import(here("data","oral_nutrition_supplement_merge.RData"))
pn <- import(here("data","parenteral_nutrition_merge.RData"))
skills <- import(here("data","skills_merge.RData"))
decision <- import(here("data","decision_merge.RData"))
```




****

## Summary tables for all respondents



```{r demographics}
demographics%>%
  select(-nutrition_support_team)%>%
        tbl_summary(
          missing_text ="No response",
          type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Characteristics of participants**")%>%
        bold_labels()
```


```{r nutrition-assessment, eval=FALSE}
t2 <- nutrition_assessment%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses,
                profession_doctor_nurse
        ))%>%
        tbl_summary(
          missing_text = "No response",
          type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Nutrition screening and assessment**")%>%
        bold_labels()
```


```{r nutrition-decision, eval=FALSE}
t3 <- decision%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses,
                profession_doctor_nurse
        ))%>%
        tbl_summary(
          missing_text = "No response",
          type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Nutrition support decision making**")%>%
        bold_labels()

t3
```

```{r tbl-stack-one, eval=FALSE}
tbl_stack(list(t2, t3), group_header = c("Nutrition screening and assessment", "Nutrition support decision making"))
```


```{r enteral-nutrition, eval=FALSE}
t4 <- en%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses,
                profession_doctor_nurse
        ))%>%
        tbl_summary(
          missing_text = "No response",
          type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Enteral nutrition support practices**")%>%
        bold_labels()
```

```{r oral-nutrition, eval=FALSE}
t5<- ons%>%select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses,
                profession_doctor_nurse
        ))%>%
        tbl_summary(
          missing_text = "No response",
          type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Oral nutrition support practices**")%>%
        bold_labels()
```


```{r pn, eval=FALSE}
t6 <- pn%>%select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses,
                profession_doctor_nurse
        ))%>%
        tbl_summary(
          missing_text = "No response",
          type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Parenteral nutrition support practices**")%>%
        bold_labels()
```

```{r tbl-stack-all-nsp, eval=FALSE}
tbl_stack(list(t4,t5, t6), group_header = c("Enteral nutrition support practices", "Oral nutrition supplement", "Parenteral nutrition support"))
```


```{r skills-training, eval=FALSE}
t7 <- skills%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses,
                profession_doctor_nurse,
                other_info
        ))%>%
        tbl_summary(
          missing_text = "No response",
          type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Skills and training**")%>%
        bold_labels()

t7
```


****

## Subcategory summary tables


### Professions analysis


```{r subgroup-nutrition-assessment}
t8 <- nutrition_assessment%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses
        ))%>%
        tbl_summary(
                by = profession_doctor_nurse,
                missing_text = "No response",
                type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Nutrition screening and assessment by profession**")%>%
        bold_labels()%>%
        add_p()%>%
        bold_p()%>%add_overall()
```


```{r subgroup-decision}
t9 <- decision%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses
        ))%>%
        tbl_summary(
                by = profession_doctor_nurse,
                missing_text = "No response",
                type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Nutrition support decision making by profession**")%>%
        bold_labels()%>%
        add_p()%>%
        bold_p()%>%add_overall()

t9
```


```{r subgroup-enteral-nutrition}
t10 <- en%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses
        ))%>%
        tbl_summary(
                by = profession_doctor_nurse,
                missing_text = "No response",
                type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Enteral nutrition support practices by profession**")%>%
        bold_labels()%>%
        add_p()%>%
        bold_p()%>%add_overall()

t10
```


```{r subgroup-ons}
t11 <- ons%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses
        ))%>%
        tbl_summary(
                by = profession_doctor_nurse,
                missing_text = "No response",
                type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Oral nutrition support practices by profession**")%>%
        bold_labels()%>%
        add_p()%>%
        bold_p()%>%add_overall()

t11
```



```{r subgroup-pn}
t12 <- pn%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses
        ))%>%
        tbl_summary(
                by = profession_doctor_nurse,
                missing_text = "No response",
                type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Parenteral nutrition support practices by profession**")%>%
        bold_labels()%>%
        add_p()%>%
        bold_p()%>%add_overall()

t12
```

```{r tbl-stack-nsp}
tbl_stack(list(t8,t9, t10, t11, t12), group_header = c("Nutrition assessment","Nutrition support decision making", "Enteral nutrition support practices", "Oral nutrition supplement practices", "Parenteral nutrition support practices"))
```



```{r subgroup-skills}
t13 <- skills%>%
        select(-c(
                years_experience_factor,
                years_working_icu_factor,
                educ_level_nurses,
                other_info
        ))%>%
        tbl_summary(
                by = profession_doctor_nurse,
                missing_text = "No response",
                type = all_dichotomous() ~ "categorical"
        )%>%
        modify_caption("**Skills and training by profession**")%>%
        bold_labels()%>%
        add_p()%>%
        bold_p()%>%add_overall()
t13
```


## Plots

```{r replace-na-to-no-response}
# Replace NA with "No response"
nutrition_assessment$nutrition_assessment <- fct_explicit_na(nutrition_assessment$nutrition_assessment, "No response")
```


```{r}


# Assuming `nutrition_assessment` is the name of the column you're interested in,
# and `profession_doctor_nurse` is the grouping variable

# Calculate the total count for each group
total_counts <- nutrition_assessment %>%
  group_by(profession_doctor_nurse, nutrition_assessment) %>%
  summarise(count = n()) %>%
  ungroup()

# Calculate the overall total for each profession_doctor_nurse group
overall_totals <- total_counts %>%
  group_by(profession_doctor_nurse) %>%
  summarise(overall_total = sum(count)) %>%
  ungroup()

# Merge the two data frames together
nutrition_assessment_percentage <- merge(total_counts, overall_totals)

# Calculate the percentage
nutrition_assessment_percentage$percentage <- (nutrition_assessment_percentage$count / nutrition_assessment_percentage$overall_total) * 100

plot_one <- ggplot(nutrition_assessment_percentage, aes(y = nutrition_assessment, x = percentage)) +
  geom_bar(stat = "identity", fill = "#0072B2", color = "#0072B2", width = 0.2) +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), vjust = 1.5, nudge_x = 0.9, nudge_y = 0.5) +
  labs(title = "Routine practice of nutrition screening or assessment", y = "Screening or assessment", x = "Respondents") +
  scale_x_continuous(labels = scales::percent_format(scale = 1), expand = expansion(mult = c(0, .1))) +
  facet_wrap(~ profession_doctor_nurse, scales = "free_y") +
  theme_pubclean() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.line = element_line(color = "#0072B2"),
        axis.text = element_text(color = "black", size = 11),
        axis.title = element_text(color = "black", size = 12, face = "bold"),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        plot.caption = element_text(hjust = 1, size = 10, color = "black"))

plot_one
```

```{r profession-assessment-plot}
# Calculate the total count for each group
total_counts <- nutrition_assessment %>%
  group_by(profession_doctor_nurse, profession_assessment) %>%
  summarise(count = n()) %>%
  ungroup()

# Calculate the overall total for each profession_doctor_nurse group
overall_totals <- total_counts %>%
  group_by(profession_doctor_nurse) %>%
  summarise(overall_total = sum(count)) %>%
  ungroup()

# Merge the two data frames together
nutrition_assessment_percentage <- merge(total_counts, overall_totals)

# Calculate the percentage
nutrition_assessment_percentage$percentage <- (nutrition_assessment_percentage$count / nutrition_assessment_percentage$overall_total) * 100

# Create the plot
plot_two <- ggplot(nutrition_assessment_percentage, aes(y = profession_assessment, x = percentage)) +
  geom_bar(stat = "identity", fill = "#0072B2", color = "#0072B2", width = 0.2) +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), vjust = 1.5, nudge_x = 0.9, nudge_y = 0.6) +
  labs(title = "Professional who performs nutrition screening or assessment", y = "Profession", x = "Respondents") +
  scale_x_continuous(labels = scales::percent_format(scale = 1), expand = expansion(mult = c(0, .1))) +
  scale_y_discrete(labels = c('Dietitian', 'Medical doctor', 'Critical care nurse', 'No response')) +
  facet_wrap(~ profession_doctor_nurse, scales = "free_y") +
  theme_pubclean() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.line = element_line(color = "#0072B2"),
        axis.text = element_text(color = "black", size = 11),
        axis.title = element_text(color = "black", size = 12, face = "bold"),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        plot.caption = element_text(hjust = 1, size = 10, color = "black"))

plot_two
```


```{r full-plot-one-two}
full_plot <- plot_one / plot_two


# Save plot
ggsave("figures/screening_plot.pdf", full_plot, width = 10, height = 5, dpi = 600)
```


## Multiple choice questions

```{r}
# Data split
tools_split <- nss %>%
  separate_rows(nutrition_tools, sep = ";")

# Split column into multiple rows
nutrition_tools_frequency <- tools_split %>% 
  group_by(nutrition_tools) %>%
  summarise(n = n ()) %>%
  ungroup()

# Calculate total respondents
total_respondents <- sum(nutrition_tools_frequency$n)

# Create a new data frame with the percentage column
nutrition_tools_percentage <- nutrition_tools_frequency %>%
  mutate(percentage = (n / total_respondents) * 100)

# Create the plot
p1 <- ggplot(nutrition_tools_percentage, aes(y = nutrition_tools, x = percentage)) +
  geom_bar(stat = "identity", fill = "#0072B2") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), nudge_x = 0.9, nudge_y = 0.2, size = 4) +
  labs(y = "Nutrition screening or assessment tools", x = "Respondents", 
       title = "Nutrition screening or assessment methods used in the ICU",
       caption = "SGA=Subjective Global Assessment, NRS2002 = Nutrition risk screening, NUTRIC = Nutrition risk in critically ill, MUST = Malnutrition universal screening tool, ABCDE = Combination of anthropometry, biochemical, clinical, dietary and environmental assessment, BMI = Body mass index") +
  scale_x_continuous(labels = scales::percent_format(scale = 1), expand = expansion(mult = c(0, .1))) +
  scale_y_discrete(labels=c("BMI/Body weight assessment", "ABCDE approach", "Don't know", 'MUST', 'NUTRIC', 'NRS2002', 'SGA')) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.line = element_line(color = "#0072B2"),
        axis.text = element_text(color = "black", size = 11),
        axis.title = element_text(color = "black", size = 12, face = "bold"),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        plot.caption = element_text(hjust = 1, size = 10, color = "black")) +
  theme(plot.margin = unit(c(1, 5, 1, 5), "lines"))  # adjust the margin to increase the width of the plotting area

# Customize the legend
legend_title <- "Frequency"
legend_labels <- c("Nutrition screening or assessment tools")
p1 <- p1 + theme(legend.position = "bottom",
                  legend.text = element_text(size = 11),
                  legend.title = element_text(size = 12, face = "bold"),
                  legend.key.size = unit(1.5, "lines")) +
  scale_fill_manual(values = "black",
                    name = legend_title,
                    labels = legend_labels)

p1 

# Save plot
ggsave("figures/nutrition_tools_plot.pdf", p1, width = 19, height = 5, dpi = 600)
```



```{r percentage-nutrition-requirements}
# Data split
req_split <- nss %>%
  separate_rows(nutrition_requirement, sep = ";")

# Split column into multiple rows
nutrition_req_frequency <- req_split %>% 
  group_by(nutrition_requirement) %>%
  summarise(n = n ()) %>%
  ungroup()

# Calculate total respondents
total_respondents <- sum(nutrition_req_frequency$n)

# Create a new data frame with the percentage column
nutrition_req_percentage <- nutrition_req_frequency %>%
  mutate(percentage = (n / total_respondents) * 100)

# Create the plot
p2 <- ggplot(nutrition_req_percentage, aes(y = nutrition_requirement, x = percentage)) +
  geom_bar(stat = "identity", fill = "#0072B2", color = "#0072B2", width = 0.6) +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), nudge_x = 0.9, nudge_y = 0.2, size = 4) +
  labs(y = "Methods for estimating nutrition requirement", x = "Respondents", title = "Usual method for estimating nutrition requirement in the ICU") +
  scale_x_continuous(labels = scales::percent_format(scale = 1), expand = expansion(mult = c(0, .1))) +
  scale_y_discrete(labels=c( 'Body weight-based methods', 'Clinical judgement', "Don't know",  'Published guidelines', "Predictive equations", "Illness severity", "Indirect calorimetry" )) +
  theme_pubclean() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.line = element_line(color = "#0072B2"),
        axis.text = element_text(color = "black", size = 11),
        axis.title = element_text(color = "black", size = 12, face = "bold"),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        plot.caption = element_text(hjust = 1, size = 10, color = "black"))

p2

# Save plot
ggsave("figures/nutrition_requirements_plot.pdf", p2, width = 10, height = 5, dpi = 600)
```



```{r percentage-mcq-en}
# Data split
commence_en_split <- nss %>%
  separate_rows(commence_en, sep = ";")


monitoring_en_split <- nss %>%
  separate_rows(methods_monitoring_en, sep = ";")


# Split column into multiple rows
commence_en_frequency <- commence_en_split %>% 
  group_by(commence_en) %>%
  summarise(n = n ()) %>%
  ungroup()


monitoring_en_frequency <- monitoring_en_split %>% 
  group_by(methods_monitoring_en) %>%
  summarise(n = n ()) %>%
  ungroup()


# Define the function to generate plots with percentages
generate_percentage_plot <- function(data, y_col, x_col, title, y_labels, caption = NULL) {
  # Calculate the total count
  total_count <- sum(data[[x_col]])
  
  # Calculate the percentage for each count
  data$percentage <- (data[[x_col]] / total_count) * 100
  
  # Create the plot
  p <- ggplot(data, aes_string(y = y_col, x = "percentage")) +  # Use 'percentage' instead of 'n'
    geom_bar(stat = "identity", fill = "#0072B2", color = "#0072B2", width = 0.6) +
    geom_text(aes(label = sprintf("%.1f%%", percentage)), nudge_x = 0.9, nudge_y = 0.2, size = 4) +  # Label with formatted percentage
    labs(y = y_col, x = "Respondents", title = title, caption = caption) + 
    scale_y_discrete(labels = y_labels) +
    theme_pubclean() +  
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(color = "#0072B2"),
          axis.text = element_text(color = "black", size = 11),
          axis.title = element_text(color = "black", size = 12, face = "bold"),
          plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
          plot.subtitle = element_text(hjust = 0.5, size = 12),
          plot.caption = element_text(hjust = 1, size = 10, color = "black", vjust = -1))
  return(p)
}

# Now you would call generate_percentage_plot instead of generate_plot for each plot


# Now generate each plot by calling the function with the appropriate arguments

p3 <- generate_percentage_plot(
  commence_en_frequency, 
  'commence_en', 
  'n', 
  'Criteria to commence EN (A)', 
  c('First day in the ICU', 'Haemodynamic stability', "Low GRV",  'Low intraabdominal pressure', 
    "Presence of bowel sounds", "Reasonable GIT function", "Reasonable nutrition status", "No response"),
  'GIT=Gastrointestinal tract, GRV = Gastric residual volume, ICU = Intensive care unit'
)



p4 <- generate_percentage_plot(
  monitoring_en_frequency,
  'methods_monitoring_en',
  'n',
  'Methods for monitoring EN (A)',
  c('Clinical signs/symptoms of intolerance', 'Compliance with EN protocols', "Compliance with nutrition goals",
    'Compliance with prescribed product', "Compliance with prescribed rate", "Not sure", "No response"),
  'EN = Enteral nutrition'
)



# View plots
p3
p4


# Save plot
ggsave("figures/criteria_en.pdf", p3, width = 10, height = 5, dpi = 600)
ggsave("figures/monitoring_en.pdf", p4, width = 10, height = 5, dpi = 600)
```



```{r percentage-mcq-pn}
# Data split
commence_pn_split <- nss %>%
  separate_rows(commence_pn, sep = ";")

timing_pn_split <- nss %>%
  separate_rows(timing_pn, sep = ";")

mpn_split <- nss %>%
  separate_rows(monitoring_pn, sep = ";")

# Split column into multiple rows
commence_pn_frequency <- commence_pn_split %>% 
  group_by(commence_pn) %>%
  summarise(n = n ()) %>%
  ungroup()

timing_pn_frequency <- timing_pn_split %>% 
  group_by(timing_pn) %>%
  summarise(n = n ()) %>%
  ungroup()

monitoring_pn_frequency <- mpn_split %>% 
  group_by(monitoring_pn) %>%
  summarise(n = n ()) %>%
  ungroup()


# Transform very important response to NA
monitoring_pn_frequency$monitoring_pn[monitoring_pn_frequency$monitoring_pn == "Very important"] <- NA
monitoring_pn_frequency$monitoring_pn <- gsub("Compliance with compliance rate", "Compliance with prescribed rate", monitoring_pn_frequency$monitoring_pn)

# Combine to NA values
monitoring_pn_frequency <- monitoring_pn_frequency%>%
  group_by(monitoring_pn) %>%
  summarise(n = sum(n, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(monitoring_pn = coalesce(monitoring_pn, "NA")) %>%
  group_by(monitoring_pn) %>%
  summarise(n = sum(n))

```


```{r commence-monitor-pn}
# Create a function to compute percentage and create a plot
create_percentage_plot <- function(df, x_var, y_var, total_sum, title, y_labels, x_label = "Respondents", caption_text) {
  df_percentage <- df %>% mutate(percentage = (x_var / total_sum) * 100)
  
  p <- ggplot(df_percentage, aes_string(y = y_var, x = "percentage")) +
    geom_bar(stat = "identity", fill = "#0072B2", color = "#0072B2", width = 0.6) +
    geom_text(aes(label = sprintf("%.1f%%", percentage)), nudge_x = 0.9, nudge_y = 0.2, size = 4) +
    labs(y = title, x = x_label, title = title, caption = caption_text) +
    scale_x_continuous(labels = scales::percent_format(scale = 1), expand = expansion(mult = c(0, .1))) +
    scale_y_discrete(labels = y_labels) +
    theme_pubclean() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(color = "#0072B2"),
      axis.text = element_text(color = "black", size = 11),
      axis.title = element_text(color = "black", size = 12, face = "bold"),
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      plot.caption = element_text(hjust = 1, size = 10, color = "black")
    )
  return(p)
}

# Define the total sum for each data frame
total_sum_p7 <- sum(commence_pn_frequency$n)
total_sum_p9 <- sum(monitoring_pn_frequency$n)



# Create plots
p7 <- create_percentage_plot(commence_pn_frequency, commence_pn_frequency$n, "commence_pn", total_sum_p7, "Criteria to commence PN (B)", c('Any GIT surgery', 'Excessive GRV', "First day of ICU", 'GIT failure, ileus or obstruction', "High output fistula or stoma", "Open abdomen", "Poor nutrition status", "Presence of GIT symptoms of intolerance", "Unsuccessful EN", "No response"), caption_text = "EN = Enteral nutrition, GIT = Gastrointestinal tract, ICU = Intensive care unit, GRV = Gastric residual volume")


p9 <- create_percentage_plot(monitoring_pn_frequency, monitoring_pn_frequency$n, "monitoring_pn", total_sum_p9, "Methods for monitoring PN (B)", c('Clinical signs/symptoms of intolerance', 'Compliance with nutrition goals', "Compliance with PN protocol", 'Compliance with prescribed product', "Compliance with prescribed rate", "No response/Null responses"), caption_text = "PN = Parenteral nutrition")

# View plots
p7
p9

# Save plot
ggsave("figures/commence_pn.pdf", p7, width = 10, height = 5, dpi = 600)
ggsave("figures/monitoring_pn.pdf", p9, width = 10, height = 5, dpi = 600)
```


```{r timing-pn}
# Load the data
timing_pn <- read.csv('data/reordered_timing_pn.csv')

# Set the order of factors
timing_pn$timing_pn <- factor(timing_pn$timing_pn, levels = c(
  "No response",
  "No standard",
  "As soon as a clinical indication becomes apparent",
  "Immediately in malnourished patients",
  "Mainly within 24 hours of ICU admission",
  "Within 3 days if enteral feeding unsuccessful",
  "After 7 days if enteral feeding unsuccessful"
))

# Calculate the total sum
total_sum <- sum(timing_pn$n)

# Create a new column for percentage
timing_pn$percentage <- (timing_pn$n / total_sum) * 100

# Create the bar chart
p8 <- ggplot(timing_pn, aes(x = timing_pn, y = percentage)) +
  geom_bar(stat='identity' ,fill = "#0072B2", color = "#0072B2", width = 0.6) +
  geom_text(aes(label=sprintf("%.1f%%", percentage)), hjust=-0.3) +
  labs(y = "Respondents", x = "Timing of PN", title = "Timing of PN", caption = "EN = Enteral Nutrition") +
  theme_pubclean() +
  theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(color = "#0072B2"),
      axis.text = element_text(color = "black", size = 11),
      axis.title = element_text(color = "black", size = 12, face = "bold"),
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      plot.caption = element_text(hjust = 1, size = 10, color = "black")) + 
  coord_flip()
   # This flips the axes to match the orientation of the original chart

# View plot
p8

# Save plot
ggsave("figures/timing_pn.pdf", p8, width = 10, height = 5, dpi = 600)
```


```{r combine-four-figures}
# Combine the plots vertically using plot_grid
combined_plot_criteria <- plot_grid(p3, p7, ncol = 1, align = "v")

# Customize the appearance of the combined plot
combined_plot_criteria <- combined_plot_criteria +
  theme(plot.margin = margin(10, 10, 20, 10, "mm"))  # Adjust margins for spacing

# Combine the plots vertically using plot_grid
combined_plot_monitoring <- plot_grid(p5, p9, ncol = 1, align = "v")

# Customize the appearance of the combined plot
combined_plot_monitoring <- combined_plot_monitoring +
  theme(plot.margin = margin(10, 10, 20, 10, "mm"))  # Adjust margins for spacing


ggsave("figures/combined_plot_criteria.pdf", combined_plot_criteria, width = 10, height = 7, dpi = 600)
ggsave("figures/combined_plot_monitoring.pdf", combined_plot_monitoring, width = 10, height = 7, dpi = 600)
```

